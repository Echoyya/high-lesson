/**
 * 事件环 为了实现 js的异步概念
 * js是单线程(主线程)
 * 进程是计算机分配任务的最小单位  不是按照线程分配的
 * 进程包括多个线程
 * 浏览器是由多个进程组成
 */

// eventLoop 解决的是 js执行时可能会调用异步方法。这些的方法的调度和执行

// 1. js执行时，会从上到下执行，遇到函数就会创建执行上下文放入到执行栈中，执行完毕后出栈
//    执行时可能会发生异步事件(存在对应的回调函数) => 内部会调用浏览器的API，定时器，ajax等

// 2. 执行上下文栈中都执行完毕后，一些异步事件的成功回调或是到达时间的定时器，会被维护到一个 事件队列，或消息队列中，先进先出

// 3. 事件循环线程：不停的扫描队列，将队列中的任务拿出放到上下文栈中执行，
//    事件循环线程：是单独的线程，不会阻塞js执行，检测当前执行栈是否为空，如果为空，从事件队列中取出一个来执行，一个一个执行

// 4. 当代码执行时，还会有一些任务，promise为例，微任务，每次执行宏任务的时候，都会单独创建一个微任务队列，先进先出

// 5. 微任务在执行完毕后，浏览器会检测是否要重新渲染，浏览器的刷新频率大约16.6ms

// 6. 每次循环一次 都会执行一个宏任务，并清空对应的微任务队列，每次循环完，都要看是否要渲染，如果需要渲染才渲染

// 宏任务 ：script脚本， 界面渲染，setTimeout setInterval postMessage  MessageChannel  setImmediate  事件 ajax 
// 微任务 ：promise.then   mutationObserver   process.nextTick()

// 微任务中在执行时 在生在微任务，会在本轮直接清空
// 微任务中在执行时 在生在宏任务，会放进宏任务队列中



